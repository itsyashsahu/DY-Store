// MongoDB Playground
// To disable this template go to Settings | MongoDB | Use Default Template For Playground.
// Make sure you are connected to enable completions and to be able to run a playground.
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// Select the database to use.
use('test');

// The drop() command destroys all data from a collection.
// Make sure you run it against the correct database and collection.
// db.sales.drop();

// Insert a few documents into the sales collection.
// db.sales.insertMany([
//   { '_id': 1, 'item': 'abc', 'price': 10, 'quantity': 2, 'date': new Date('2014-03-01T08:00:00Z') },
//   { '_id': 2, 'item': 'jkl', 'price': 20, 'quantity': 1, 'date': new Date('2014-03-01T09:00:00Z') },
//   { '_id': 3, 'item': 'xyz', 'price': 5, 'quantity': 10, 'date': new Date('2014-03-15T09:00:00Z') },
//   { '_id': 4, 'item': 'xyz', 'price': 5, 'quantity':  20, 'date': new Date('2014-04-04T11:21:39.736Z') },
//   { '_id': 5, 'item': 'abc', 'price': 10, 'quantity': 10, 'date': new Date('2014-04-04T21:23:13.331Z') },
//   { '_id': 6, 'item': 'def', 'price': 7.5, 'quantity': 5, 'date': new Date('2015-06-04T05:08:13Z') },
//   { '_id': 7, 'item': 'def', 'price': 7.5, 'quantity': 10, 'date': new Date('2015-09-10T08:43:00Z') },
//   { '_id': 8, 'item': 'abc', 'price': 10, 'quantity': 5, 'date': new Date('2016-02-06T20:20:13Z') },
// ]);

// Run a find command to view items sold on April 4th, 2014.
// db.sales.find({ date: { $gte: new Date('2014-04-04'), $lt: new Date('2014-04-05') } });

// Build an aggregation to view total sales for each product in 2014.
// const aggregation = [
//   { $match: { date: { $gte: new Date('2014-01-01'), $lt: new Date('2015-01-01') } } },
//   { $group: { _id: '$item', totalSaleAmount: { $sum: { $multiply: [ '$price', '$quantity' ] } } } }
// ];

// Run the aggregation and open a cursor to the results.
// Use toArray() to exhaust the cursor to return the whole result set.
// You can use hasNext()/next() to iterate through the cursor page by page.


// db.sales.aggregate(aggregation);
// db.products.createIndex({"title":"text"})

// const aggregation = [
// {
//     $search:{
//         "index":"search",
//         "text":{
//             "query":"bottle",
//             "path":{
//                 "wildcard":'*'
//             },
//             "fuzzy":{}
//         } 
//     }
// }
// ];



// https://www.youtube.com/watch?v=o2ss2LJNZVE

// using just defined fileds to search 
// {
//     "mappings":{
//         "dynamic":false,
//         "fields":{
//             "title":{
//                 "type":"string"
//                  "dynamic":true
//             },
//             "description":{
//                 "type":"string",
//                  "dynamic":true
//             },
//             "category":{
//                 "analyzer": "lucene.keyword",
//                 "searchAnalyzer": "lucene.keyword",
//                 "type": "string"
//             },
//             "tags":{
//                 "analyzer": "lucene.keyword",
//                 "searchAnalyzer": "lucene.keyword",
//                 "type": "string"
//             }
//         }
//     }
// }


    // "path":["category", "description", "tags", "title"],
const aggregation = [
{
    $search:{
        "index":"search",
        "text":{
            "query":"water bottle",
            "path":"category",
        } 
    }
}
];


// creating the autocomplete index 
// using json editor with these settings
// {
//     "mappings":{
//         "dynamic":false,
//         "fields":{
//             "title":[{
//                 "foldDiacritics":false,
//                 "maxGrams":7,
//                 "minGrams":3,
//                 "tokenization":"edgeGram",
//                 "type":"autocomplete"
//             }]
//         }
//     }
// }

// autocomplete
// const aggregation = [
// {
//     $search:{
//         "index":"autoComplete",
//         "autocomplete":{
//             "query":"dm",
//             "path":"title",
//             "tokenOrder":"sequential",
//         } 
//     }
// },
// {
//     $limit:10
// },
// {
//     $project:{
//         "title":1
//     }
// },
// ];

// db.products.createIndex( { } )
// db.products.aggregate(aggregation);
// db.products.find({"category": { $elemMatch: {$eq:"water bottle"} } })
// db.products.find({"category": "Water Bottles" })
// db.products.find()


db.products.find(
    {
        "tags":{$all:["Bootles","Thermal Insulated Bottles"]}
    })
// db.products.find({
    // "rating":{$gte:3,$lte:6,$eq:3.5 },
    // "category":"Water Bottles",
    // "pricing":{$elemMatch:{"cost":{$eq:500},"perQty":"item" }}
        
//  })


// db.version();